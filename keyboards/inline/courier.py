import aiogram.utils.markdown as fmt
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from states.fsm import finish_state, get_fsm_data, save_fsm_data
from utils.geo import get_map_url
from utils.status import send_info_log, reserve_back
from utils.db import sql
from utils.proccess_time import get_predict_time_for_delivery
from utils.ozon_express_api.request import start_delivery_api, start_delivery_last_mile, complete_delivery_ozon
from keyboards.creating import create_inline_keyboard


# ****************************************Delivering****************************************
async def get_level_1(function: str, status: str) -> dict:
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫")]

    if status in ["on_shift", "reserve_delivery", "delivering"]:
        buttons = [{"–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π": ["delivery", "2", "0", "0", "0", "open"]},
                   {"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":           ["main", "1", "0", "0", "0", "pass"]},
                   {"–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É":      ["main", "1", "0", "0", "0", "finish"]}]
    else:
        buttons = [{"–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É": ["main", "1", "0", "0", "0", "start"]},
                   {"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":   ["main", "1", "0", "0", "0", "pass"]},
                   {"–í—ã–π—Ç–∏":        ["main", "0", "0", "0", "0", "close_bot"]}]

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_2(function: str, cll: CallbackQuery) -> dict:
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    await reserve_back(cll.from_user.id, "reserve_delivery")

    count = await sql.count_orders(cll.from_user.id, "awaiting_deliver")
    text.append(fmt.text(fmt.hbold("–î–æ—Å—Ç—É–ø–Ω–æ:"), count))

    if function == 'courier':
        callback_back = ["main", "1", "0", "0", "0", "back"]
    else:
        callback_back = ["order", "2", "0", "0", "0", "back"]

    if count != 0:
        text.append(fmt.text("\n–ù–∞–∂–º–∏—Ç–µ", fmt.hbold("–î–æ—Å—Ç–∞–≤–∫–∞"), ",—á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É"))
        buttons = [{"–ù–∞–∑–∞–¥":    callback_back,
                    "–î–æ—Å—Ç–∞–≤–∫–∞": ["delivery", "3", "0", "0", "0", "reserve_delivery"]}]

    else:
        text.append(fmt.text("\n–ù–∞–∂–º–∏—Ç–µ", fmt.hbold("–û–±–Ω–æ–≤–∏—Ç—å"), "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"))
        buttons = [{"–ù–∞–∑–∞–¥":    callback_back,
                    "–û–±–Ω–æ–≤–∏—Ç—å": ["delivery", "2", "0", "0", "0", "update"]}]

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_3(function: str, cll: CallbackQuery) -> dict:
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    orders_data = await sql.reserve_orders_for_delivery(cll.from_user.id)

    text.append(fmt.text("–î–æ—Å—Ç—É–ø–Ω–æ: ", fmt.hbold(len(orders_data))))
    text.append(fmt.text("\n–û—Ç–º–µ—Ç–∏–≤ –∑–∞–∫–∞–∑(—ã), –Ω–∞–∂–º–∏—Ç–µ ", fmt.hbold("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), ", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"))

    buttons = []
    for ind, order in enumerate(orders_data):
        if ind == 0:
            buttons.append({order["posting_number"]: ["delivery", "4", "0", "0", order["posting_number"], "open"],
                            "‚úÖÔ∏è":                     ["delivery", "5", "0", "0", order["posting_number"], "added"]})
        else:
            buttons.append({order["posting_number"]: ["delivery", "4", "0", "0", order["posting_number"], "open"],
                            "‚òëÔ∏è":                     ["delivery", "5", "0", "0", order["posting_number"], "add"]})

    buttons.append({"–û—Ç–º–µ–Ω–∞":      ["delivery", "2", "0", "0", "0", "reserve_back"],
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å": ["delivery", "6", "0", "0", "0", "reserve_delivery"]})

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_4(function: str, cll: CallbackQuery) -> dict:
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    callback = cll.data.split(":")

    order = await sql.get_order_info_for_delivering(callback[5])

    complete_time = await get_predict_time_for_delivery(order["shipment_date"], 24)
    text.append(fmt.text(fmt.text(fmt.hbold("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"), order["posting_number"]),
                         fmt.text(fmt.hbold("–ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –¥–æ:"), fmt.text(complete_time)),
                         fmt.text(fmt.hbold("–ê–¥—Ä–µ—Å:"), fmt.hlink(order["address"],
                                                                 await get_map_url(order["latitude"],
                                                                                   order["longitude"]))),
                         sep="\n\n"))

    buttons = [{"–ù–∞–∑–∞–¥": ["delivery", "4", "0", "0", "0", "back"]}]

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_5(cll: CallbackQuery) -> dict:
    markup = cll.message.reply_markup

    for ind, button in enumerate(markup.inline_keyboard):
        if cll.data == button[1].callback_data:
            new_data = cll.data.split(":")

            if new_data[-1] == "add":
                new_sign, new_data[6] = "‚úÖÔ∏è", "rem"

            elif new_data[-1] == "rem":
                new_sign, new_data[6] = "‚òëÔ∏èÔ∏è", "add"

            else:
                continue

            markup.inline_keyboard[ind][1].text = new_sign
            markup.inline_keyboard[ind][1].callback_data = ":".join(new_data)

    return {"reply_markup": markup}


async def get_level_6(function: str, cll: CallbackQuery, state: FSMContext, tz: str) -> dict:
    orders = await check_added_orders(cll)
    orders_for_delivery = await sql.start_delivery_order(orders["added"], cll.from_user.id, tz)

    if len(orders_for_delivery) > 0:
        text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n"), fmt.text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞")]

        if len(orders_for_delivery) != len(orders["added"]):
            count_cancelled_orders = len(orders["added"]) - len(orders_for_delivery)
            if count_cancelled_orders == 1:
                text.append(fmt.hbold(f"\n‚ùó–°—Ç–∞—Ç—É—Å 1 –∑–∞–∫–∞–∑–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, –≤ —Å–≤—è–∑–∏ —Å —á–µ–º, –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"))
            else:
                text.append(fmt.hbold(f"\n‚ùó–°—Ç–∞—Ç—É—Å—ã {count_cancelled_orders} –∑–∞–∫–∞–∑–æ–≤ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, –≤ —Å–≤—è–∑–∏ —Å —á–µ–º, –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"))

        list_of_orders = [order["posting_number"] for order in orders_for_delivery]

        await start_delivery_api(cll.from_user.id, list_of_orders)
        await send_info_log(cll.message.chat.id, "–ù–∞—á–∞–ª –¥–æ—Å—Ç–∞–≤–∫—É",
                            fmt.text(fmt.hbold("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"), fmt.hcode(*list_of_orders)))
        await save_fsm_data(state, data_=[dict(order) for order in orders_for_delivery])

        await reserve_back(cll.from_user.id, "reserve_delivery")

        buttons = []
        for ind, order in enumerate(orders_for_delivery):
            buttons.append({order["posting_number"]: ["delivery", "7", "in_process",
                                                      ind, order["posting_number"], "open"]})
        buttons.append({"–ó–∞–±—Ä–∞–ª —Å–æ —Å–∫–ª–∞–¥–∞": ["delivery", "8", "0", "0", "0", "open"]})

    else:
        text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n"),
                fmt.text("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω‚ùó\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ", fmt.hbold("–í–µ—Ä–Ω—É—Ç—å—Å—è"))]

        buttons = [{"–í–µ—Ä–Ω—É—Ç—å—Å—è": ["main", "1", "0", "0", "0", "back"]}]

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_7(function: str, cll: CallbackQuery, state: FSMContext) -> dict:
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    orders = (await get_fsm_data(state, ["data_"]))["data_"]
    callback = cll.data.split(":")

    text.append(fmt.text(fmt.text(fmt.hbold("\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"), orders[int(callback[4])]["posting_number"]),
                         fmt.text(fmt.hbold("–ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –¥–æ:"), str(orders[int(callback[4])]["shipment_date"])),
                         fmt.text(fmt.hbold("\n–ê–¥—Ä–µ—Å:"), fmt.hlink(orders[int(callback[4])]["address"],
                                                                   await get_map_url(
                                                                       orders[int(callback[4])]["latitude"],
                                                                       orders[int(callback[4])]["longitude"]))),
                         fmt.text(fmt.hbold("\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å:"), (orders[int(callback[4])]['addressee_name'])),
                         fmt.text(fmt.hbold("–¢–µ–ª–µ—Ñ–æ–Ω:"), fmt.hcode(f"+{orders[int(callback[4])]['addressee_phone']}")),
                         fmt.text(fmt.hbold("\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:"), orders[int(callback[4])]['customer_comment']),
                         sep='\n'))

    buttons = [{"–ù–∞–∑–∞–¥": ["delivery", "7", "0", "0", "0", "back"]}]

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_8(function: str, cll: CallbackQuery, state: FSMContext):
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    orders = (await get_fsm_data(state, ["data_"]))["data_"]

    await start_delivery_last_mile(cll.from_user.id, [order["posting_number"] for order in orders])

    text.append(fmt.text(fmt.text(fmt.hbold("–ü—Ä–æ–≥—Ä–µ—Å—Å: "), fmt.hbold("0"),
                                  " –∏–∑ ", fmt.hbold(f"{len(orders)}")),
                         sep="\n"))

    buttons = []
    for ind, order in enumerate(orders):
        buttons.append(
            {order["posting_number"]: ["delivery", "7", "in_process", ind, order["posting_number"], "open"]})
        buttons.append(
            {"‚úñ–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω":         ["delivery", "9", "button", "0", order["posting_number"], "undelivered"],
             "‚úî–î–æ—Å—Ç–∞–≤–ª–µ–Ω":            ["delivery", "9", "button", "0", order["posting_number"], "delivered"]})

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_9(function, tz, cll: CallbackQuery = None, callback=None,
                      reply_markup=None, tg_id=None, location=None):
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    callback_ = callback.split(":") if callback else cll.data.split(":")
    current_reply_markup = reply_markup if reply_markup else cll.message.reply_markup
    current_tg_id = tg_id if tg_id else cll.message.chat.id
    in_process, delivered, undelivered = 0, 0, 0

    buttons = []
    for row in current_reply_markup.inline_keyboard:
        if len(row) == 1:
            for button in row:
                button_data = button.callback_data.split(":")

                if callback_[5] == button_data[5]:
                    if callback_[6] == "undelivered":
                        buttons.append(
                            {f"{button.text}": ["delivery", "7", "cancel", button_data[4], button_data[5], "open"]})
                        buttons.append(
                            {"–ù–∞–∑–∞–¥": ["delivery", "9", "button", button_data[4], button_data[5], "back"],
                             "üîô–û—Ç–∫–∞–∑ –æ—Ç —Ç–æ–≤–∞—Ä–∞": ["delivery", "9", "button", button_data[4], button_data[5], "return"],
                             "üìµ–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è":   ["delivery", "9", "button", button_data[4], button_data[5], "no_call"]})

                        in_process += 1

                    elif callback_[6] == "delivered":
                        await complete_delivery_ozon(current_tg_id, button.text)
                        await sql.complete_posting_delivery(button_data[5], current_tg_id,
                                                            tz, location, 'conditionally_delivered')
                        await send_info_log(current_tg_id, "–ó–∞–≤–µ—Ä—à–∏–ª –¥–æ—Å—Ç–∞–≤–∫—É",
                                            fmt.text(fmt.text(fmt.hbold("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"), button.text),
                                                     fmt.text(fmt.hbold("–°—Ç–∞—Ç—É—Å:"), "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"),
                                                     sep="\n"))

                        buttons.append(
                            {f"{button.text} ‚úÖ": ["delivery", "7", "delivered", button_data[4], button_data[5], "open"]})

                        delivered += 1

                    elif callback_[6] in ["return", "no_call"]:

                        await sql.complete_posting_delivery(button_data[5], current_tg_id, tz, location, 'undelivered')
                        await send_info_log(current_tg_id, "–ó–∞–≤–µ—Ä—à–∏–ª –¥–æ—Å—Ç–∞–≤–∫—É",
                                            fmt.text(fmt.text(fmt.hbold("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"), button.text),
                                                     fmt.text(fmt.hbold("–°—Ç–∞—Ç—É—Å:"), "–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"),
                                                     fmt.text(fmt.hbold("–ü—Ä–∏—á–∏–Ω–∞:"),
                                                              "–û—Ç–∫–∞–∑" if callback_[6] == "return" else "–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è"),
                                                     sep="\n"))

                        posting_button = f"{button.text} üìµ" if callback_[6] == "no_call" else f"{button.text} üîô"
                        buttons.append(
                            {posting_button: ["delivery", "7", "undelivered", button_data[4], button_data[5], "open"]})

                        undelivered += 1

                    elif callback_[6] in ["back"]:
                        buttons.append({
                            button.text: ["delivery", "7", "in_process", button_data[4], button_data[5], "open"]})
                        buttons.append({
                            "‚úñ–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω": ["delivery", "9", "button", button_data[4], button_data[5], "undelivered"],
                            "‚úî–î–æ—Å—Ç–∞–≤–ª–µ–Ω": ["delivery", "9", "button", button_data[4], button_data[5], "delivered"]})
                        in_process += 1

                elif button_data[3] == "in_process":
                    buttons.append({
                        button.text:     ["delivery", "7", "in_process", button_data[4], button_data[5], "open"]})
                    buttons.append({
                        "‚úñ–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω": ["delivery", "9", "button", button_data[4], button_data[5], "undelivered"],
                        "‚úî–î–æ—Å—Ç–∞–≤–ª–µ–Ω":    ["delivery", "9", "button", button_data[4], button_data[5], "delivered"]})
                    in_process += 1

                elif button_data[3] == "cancel":
                    buttons.append({
                        button.text:         ["delivery", "7", "cancel", button_data[4], button_data[5], "open"]})
                    buttons.append({
                        "–ù–∞–∑–∞–¥":             ["delivery", "9", "button", button_data[4], button_data[5], "back"],
                        "üîô–û—Ç–∫–∞–∑ –æ—Ç —Ç–æ–≤–∞—Ä–∞": ["delivery", "9", "button", button_data[4], button_data[5], "return"],
                        "üìµ–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è":   ["delivery", "9", "button", button_data[4], button_data[5], "no_call"]})
                    in_process += 1

                elif button_data[3] == "delivered":
                    buttons.append({
                        button.text: ["delivery", "7", "delivered", button_data[4], button_data[5], "open"]})
                    delivered += 1

                elif button_data[3] == "undelivered":
                    buttons.append({
                        button.text: ["delivery", "7", "undelivered", button_data[4], button_data[5], "open"]})
                    undelivered += 1

                break

    total_count = in_process + delivered + undelivered
    text.append(fmt.text(fmt.text(fmt.hbold("–ü—Ä–æ–≥—Ä–µ—Å—Å:"), fmt.hbold(total_count - in_process),
                                  " –∏–∑ ", fmt.hbold(total_count)),
                         sep="\n"))

    if in_process == 0:
        if undelivered == 0:
            text.append(fmt.text("\n–û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã\n"))
            buttons.append({"–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ —Å–∫–ª–∞–¥": ["delivery", "10", "returning", "0", "0", "open"]})

        else:
            text.append(fmt.text(fmt.text("\n–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É"),
                                 fmt.text("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥"),
                                 sep="\n"))
            buttons.append({"–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ —Å–∫–ª–∞–¥": ["delivery", "10", "returning", "undelivered", "0", "open"]})

        text.append(fmt.text("\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", fmt.hbold("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ —Å–∫–ª–∞–¥"), ", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"))

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def get_level_10(function: str, cll: CallbackQuery):
    text = [fmt.hbold("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ üõ∫\n")]

    await finish_state(cll.message.chat.id, cll.from_user.id)

    if cll.data.split(":")[-3] == "undelivered":
        text.append(fmt.text(fmt.text("–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                             sep="\n"))

        buttons = [{"–í–µ—Ä–Ω—É–ª –∑–∞–∫–∞–∑ –Ω–∞ —Å–∫–ª–∞–¥": ["delivery", "2", "0", "0", "0", "complete"]}]

    else:
        text.append(fmt.text(fmt.text("\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"),
                             sep="\n"))

        buttons = [{"–í–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥": ["delivery", "2", "0", "0", "0", "complete"]}]

    return {"text": fmt.text(*text, sep="\n"), "reply_markup": await create_inline_keyboard(function, buttons)}


async def check_added_orders(cll: CallbackQuery) -> dict:
    added_orders, other_orders = [], []
    for ind, button in enumerate(cll.message.reply_markup.inline_keyboard):
        if ind + 1 != len(cll.message.reply_markup.inline_keyboard):
            if button[1].callback_data.split(":")[-1] in ["added", "rem"]:
                added_orders.append(button[0].text)

            else:
                other_orders.append(button[0].text)

    return {"added": added_orders, "other": other_orders}
